---
description: 
globs: 
alwaysApply: false
---
# Supabase Integration Guide

## Project Setup
This project uses Supabase as the backend with configurations in:
- [supabase/](mdc:supabase) - Supabase project configuration
- [src/lib/supabase/](mdc:src/lib/supabase) - Supabase client utilities

## Client Configuration

### Server vs Client Components
- Use Server Components for initial data fetching when possible
- Use Client Components for real-time subscriptions and user interactions
- Always import the appropriate client for the component type

### Authentication Patterns
```tsx
// Server Component - check auth status
import { createClient } from "@/lib/supabase/server"

export default async function ServerPage() {
  const supabase = createClient()
  const { data: { user } } = await supabase.auth.getUser()
  
  if (!user) {
    redirect('/login')
  }
  
  return <div>Welcome {user.email}</div>
}

// Client Component - auth actions
"use client"
import { createClient } from "@/lib/supabase/client"

export function AuthButton() {
  const supabase = createClient()
  
  const handleSignOut = async () => {
    await supabase.auth.signOut()
  }
  
  return <Button onClick={handleSignOut}>Sign Out</Button>
}
```

## Database Operations

### Data Fetching in Server Components
```tsx
import { createClient } from "@/lib/supabase/server"

export default async function PostsPage() {
  const supabase = createClient()
  const { data: posts, error } = await supabase
    .from('posts')
    .select('*')
    .order('created_at', { ascending: false })
  
  if (error) {
    throw new Error('Failed to fetch posts')
  }
  
  return (
    <div>
      {posts.map(post => (
        <Card key={post.id}>
          <CardContent>{post.title}</CardContent>
        </Card>
      ))}
    </div>
  )
}
```

### Real-time Subscriptions in Client Components
```tsx
"use client"
import { createClient } from "@/lib/supabase/client"
import { useEffect, useState } from "react"

export function LivePosts() {
  const [posts, setPosts] = useState([])
  const supabase = createClient()
  
  useEffect(() => {
    const channel = supabase
      .channel('posts')
      .on('postgres_changes', 
        { event: '*', schema: 'public', table: 'posts' },
        (payload) => {
          // Handle real-time updates
        }
      )
      .subscribe()
    
    return () => {
      supabase.removeChannel(channel)
    }
  }, [supabase])
  
  return <div>{/* Render posts */}</div>
}
```

## File Storage

### File Upload with Progress
```tsx
"use client"
import { createClient } from "@/lib/supabase/client"
import { useState } from "react"
import { Progress } from "@/components/ui/progress"

export function FileUpload() {
  const [uploading, setUploading] = useState(false)
  const [progress, setProgress] = useState(0)
  const supabase = createClient()
  
  const uploadFile = async (file: File) => {
    setUploading(true)
    
    const { data, error } = await supabase.storage
      .from('uploads')
      .upload(`files/${Date.now()}-${file.name}`, file, {
        onUploadProgress: (progress) => {
          setProgress((progress.loaded / progress.total) * 100)
        }
      })
    
    setUploading(false)
    return { data, error }
  }
  
  return (
    <div>
      {uploading && <Progress value={progress} />}
      <Input type="file" onChange={(e) => uploadFile(e.target.files[0])} />
    </div>
  )
}
```

## Row Level Security (RLS)

### Common RLS Patterns
- Enable RLS on all tables
- Create policies for different user roles
- Use `auth.uid()` for user-specific data
- Implement policies for read, insert, update, delete operations

Example policy patterns:
```sql
-- Users can only see their own data
CREATE POLICY "Users can view own data" ON profiles
  FOR SELECT USING (auth.uid() = user_id);

-- Users can update their own profile
CREATE POLICY "Users can update own profile" ON profiles
  FOR UPDATE USING (auth.uid() = user_id);
```

## Error Handling

### Consistent Error Handling
```tsx
import { Alert, AlertDescription } from "@/components/ui/alert"

export function DataComponent() {
  const [error, setError] = useState<string | null>(null)
  
  const fetchData = async () => {
    const { data, error } = await supabase
      .from('table')
      .select('*')
    
    if (error) {
      setError(error.message)
      return
    }
    
    // Handle success
  }
  
  if (error) {
    return (
      <Alert variant="destructive">
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    )
  }
  
  return <div>{/* Component content */}</div>
}
```

## TypeScript Integration

### Type Generation
- Use `supabase gen types typescript` to generate types
- Import and use generated types for type safety
- Create custom types for complex queries

```tsx
import { Database } from "@/types/supabase"

type Post = Database['public']['Tables']['posts']['Row']
type PostInsert = Database['public']['Tables']['posts']['Insert']
```

## Best Practices

### Performance
- Use `select('*')` sparingly - specify needed columns
- Implement pagination for large datasets
- Use indexes for frequently queried columns
- Cache data appropriately with Next.js caching

### Security
- Always enable RLS
- Validate data on both client and server
- Use environment variables for configuration
- Implement proper auth flows

### Data Mutations
- Use optimistic updates for better UX
- Implement proper loading states
- Handle offline scenarios
- Use transactions for complex operations
