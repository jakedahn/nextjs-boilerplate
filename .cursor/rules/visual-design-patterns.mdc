---
description: 
globs: 
alwaysApply: false
---
# Visual Design & Tailwind CSS 4 Patterns

## Design Philosophy
Create visually interesting and engaging interfaces that prioritize:
- Modern, clean aesthetics with purposeful visual hierarchy
- Smooth animations and micro-interactions
- Responsive design that works beautifully across all devices
- Accessibility and usability without compromising visual appeal

## Tailwind CSS 4 Usage

### Core Principles
- Use the utility-first approach for rapid development
- Leverage CSS custom properties for dynamic theming
- Implement consistent spacing using the built-in scale
- Use semantic color names from the design system

### Layout Patterns

#### Grid Systems
```tsx
// Modern CSS Grid layouts
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
  <Card className="hover:shadow-lg transition-shadow duration-300">
    <CardContent>Content</CardContent>
  </Card>
</div>

// Complex responsive grids
<div className="grid grid-cols-[250px_1fr] lg:grid-cols-[280px_1fr_300px] gap-6">
  <aside>Sidebar</aside>
  <main>Main content</main>
  <aside className="hidden lg:block">Secondary sidebar</aside>
</div>
```

#### Flexbox Patterns
```tsx
// Centered hero sections
<section className="min-h-screen flex items-center justify-center">
  <div className="text-center space-y-6">
    <h1 className="text-4xl md:text-6xl font-bold">Hero Title</h1>
    <Button size="lg">Get Started</Button>
  </div>
</section>

// Navigation with space-between
<nav className="flex items-center justify-between p-4">
  <div className="flex items-center gap-4">
    <Badge>Logo</Badge>
    <span className="font-semibold">App Name</span>
  </div>
  <div className="flex items-center gap-2">
    <Button variant="ghost">Login</Button>
    <Button>Sign Up</Button>
  </div>
</nav>
```

## Visual Enhancement Techniques

### Shadows and Depth
```tsx
// Layered card designs
<Card className="shadow-sm hover:shadow-xl transition-all duration-300 border-0 bg-gradient-to-br from-white to-gray-50">
  <CardContent className="p-6">
    <div className="space-y-4">
      <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center">
        <Icon className="text-white" />
      </div>
      <h3 className="text-xl font-semibold">Feature Title</h3>
    </div>
  </CardContent>
</Card>

// Floating action button
<Button 
  size="icon" 
  className="fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 bg-gradient-to-r from-blue-500 to-purple-500"
>
  <PlusIcon className="h-6 w-6" />
</Button>
```

### Gradients and Colors
```tsx
// Hero background gradients
<section className="bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-white">
  <div className="bg-black/20 min-h-screen flex items-center">
    <div className="container mx-auto px-4">
      <h1 className="text-5xl font-bold mb-6">Amazing Product</h1>
    </div>
  </div>
</section>

// Subtle accent gradients
<div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-100 rounded-lg p-6">
  <Alert className="border-blue-200 bg-blue-50/50">
    <AlertDescription>Important information</AlertDescription>
  </Alert>
</div>
```

### Animations and Transitions

#### Hover Effects
```tsx
// Card hover animations
<Card className="group cursor-pointer transition-all duration-300 hover:scale-105 hover:shadow-xl">
  <CardContent className="p-6">
    <div className="flex items-center gap-4">
      <div className="w-12 h-12 bg-primary rounded-lg flex items-center justify-center group-hover:rotate-12 transition-transform duration-300">
        <Icon className="text-primary-foreground" />
      </div>
      <div>
        <h3 className="font-semibold group-hover:text-primary transition-colors">
          Interactive Card
        </h3>
      </div>
    </div>
  </CardContent>
</Card>

// Button loading states
<Button disabled={loading} className="relative">
  {loading && (
    <div className="absolute inset-0 flex items-center justify-center">
      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
    </div>
  )}
  <span className={loading ? "opacity-0" : ""}>Submit</span>
</Button>
```

#### Page Transitions
```tsx
// Staggered list animations
<div className="space-y-4">
  {items.map((item, index) => (
    <div 
      key={item.id}
      className="animate-in slide-in-from-left duration-500"
      style={{ animationDelay: `${index * 100}ms` }}
    >
      <Card>
        <CardContent>{item.content}</CardContent>
      </Card>
    </div>
  ))}
</div>

// Fade-in sections
<section className="animate-in fade-in-0 slide-in-from-bottom-4 duration-700">
  <div className="container mx-auto px-4 py-16">
    <h2 className="text-3xl font-bold text-center mb-12">Features</h2>
  </div>
</section>
```

## Component Enhancement Patterns

### Enhanced Data Display
```tsx
// Rich table with hover states
<Table>
  <TableHeader>
    <TableRow className="border-b-2">
      <TableHead className="font-semibold text-foreground">Name</TableHead>
      <TableHead className="font-semibold text-foreground">Status</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    {data.map(item => (
      <TableRow 
        key={item.id} 
        className="hover:bg-muted/50 transition-colors cursor-pointer"
      >
        <TableCell className="font-medium">{item.name}</TableCell>
        <TableCell>
          <Badge variant={item.status === 'active' ? 'default' : 'secondary'}>
            {item.status}
          </Badge>
        </TableCell>
      </TableRow>
    ))}
  </TableBody>
</Table>

// Enhanced form layouts
<Card className="max-w-md mx-auto">
  <CardHeader className="text-center pb-2">
    <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full mx-auto mb-4 flex items-center justify-center">
      <UserIcon className="w-8 h-8 text-white" />
    </div>
    <CardTitle className="text-2xl">Create Account</CardTitle>
  </CardHeader>
  <CardContent className="space-y-4">
    <div className="space-y-2">
      <Label htmlFor="email">Email</Label>
      <Input 
        id="email" 
        type="email" 
        className="focus:ring-2 focus:ring-blue-500 transition-all"
      />
    </div>
    <Button className="w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600">
      Sign Up
    </Button>
  </CardContent>
</Card>
```

### Interactive Elements
```tsx
// Animated progress indicators
<div className="space-y-2">
  <div className="flex justify-between text-sm">
    <span>Progress</span>
    <span>{progress}%</span>
  </div>
  <Progress 
    value={progress} 
    className="h-2 bg-gray-200"
  />
</div>

// Enhanced navigation
<nav className="sticky top-0 z-50 bg-white/80 backdrop-blur-lg border-b">
  <div className="container mx-auto px-4">
    <div className="flex items-center justify-between h-16">
      <div className="flex items-center gap-2">
        <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg" />
        <span className="font-bold text-xl">Brand</span>
      </div>
      <Button variant="outline" className="backdrop-blur-sm">
        Contact
      </Button>
    </div>
  </div>
</nav>
```

## Responsive Design Patterns

### Mobile-First Approach
```tsx
// Responsive grid with stacking
<div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6">
  {/* Content adapts based on screen size */}
</div>

// Responsive typography
<h1 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold leading-tight">
  Responsive Heading
</h1>

// Conditional layouts
<div className="flex flex-col lg:flex-row gap-6">
  <aside className="lg:w-64 order-2 lg:order-1">Sidebar</aside>
  <main className="flex-1 order-1 lg:order-2">Main content</main>
</div>
```

## Accessibility with Style
- Use sufficient color contrast ratios
- Implement focus states that are visually appealing
- Ensure interactive elements have adequate touch targets (44px minimum)
- Use semantic HTML with ARIA labels where needed
- Test with screen readers and keyboard navigation

## Performance Considerations
- Use CSS transforms for animations (they don't trigger layout)
- Implement `will-change` for complex animations
- Use `backdrop-filter` sparingly as it can impact performance
- Optimize images with Next.js `Image` component
- Consider reduced motion preferences with `motion-reduce:`
