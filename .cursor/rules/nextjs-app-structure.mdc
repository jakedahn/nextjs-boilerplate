---
description: 
globs: 
alwaysApply: false
---
# Next.js 15 App Structure & Best Practices

## Project Structure
This is a Next.js 15 application using the App Router with the following structure:
- [src/app/](mdc:src/app) - App Router pages and layouts
- [src/components/](mdc:src/components) - Reusable React components
- [src/components/ui/](mdc:src/components/ui) - shadcn/ui components
- [src/hooks/](mdc:src/hooks) - Custom React hooks
- [src/lib/](mdc:src/lib) - Utility functions and configurations
- [src/lib/supabase/](mdc:src/lib/supabase) - Supabase client and utilities

## Next.js 15 Guidelines

### App Router Patterns
- Always use the App Router architecture
- Place pages in `src/app/` with `page.tsx` files
- Use `layout.tsx` for shared layouts
- Implement `loading.tsx` for loading states
- Create `error.tsx` for error boundaries
- Use `not-found.tsx` for 404 pages

### Server vs Client Components
- Prefer Server Components by default for better performance
- Use `"use client"` directive only when needed (interactivity, hooks, browser APIs)
- Keep data fetching in Server Components when possible
- Use React 19 features like `use()` hook for data fetching

### File Organization
- Group related components in feature folders
- Use barrel exports (`index.ts`) for clean imports
- Keep components small and focused
- Use TypeScript for all components and utilities

### Performance Optimizations
- Use `next/image` for optimized images
- Implement proper caching strategies
- Use `next/font` for font optimization
- Leverage static generation when possible
- Use `loading.tsx` and `Suspense` for progressive loading

### Import Patterns
- Use `@/` path mapping for imports from `src/`
- Import shadcn/ui components from `@/components/ui/`
- Import utilities from `@/lib/`
- Import hooks from `@/hooks/`

Example component structure:
```tsx
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { createClient } from "@/lib/supabase/client"

export default function MyComponent() {
  return (
    <Card>
      <Button>Click me</Button>
    </Card>
  )
}
```
