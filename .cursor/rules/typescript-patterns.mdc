---
description: 
globs: 
alwaysApply: false
---
# TypeScript Patterns & Best Practices

## Project Configuration
This project uses TypeScript with strict type checking. Configuration is in [tsconfig.json](mdc:tsconfig.json).

## Component Typing Patterns

### React Component Types
```tsx
// Functional component with props
interface ButtonProps {
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link"
  size?: "default" | "sm" | "lg" | "icon"
  children: React.ReactNode
  onClick?: () => void
  disabled?: boolean
}

export function CustomButton({ 
  variant = "default", 
  size = "default",
  children, 
  onClick,
  disabled = false
}: ButtonProps) {
  return (
    <Button 
      variant={variant} 
      size={size} 
      onClick={onClick}
      disabled={disabled}
    >
      {children}
    </Button>
  )
}

// Component with generic types
interface DataListProps<T> {
  items: T[]
  renderItem: (item: T) => React.ReactNode
  keyExtractor: (item: T) => string
}

export function DataList<T>({ items, renderItem, keyExtractor }: DataListProps<T>) {
  return (
    <div className="space-y-4">
      {items.map(item => (
        <div key={keyExtractor(item)}>
          {renderItem(item)}
        </div>
      ))}
    </div>
  )
}
```

### Form and Event Handling
```tsx
// Form event types
interface LoginFormData {
  email: string
  password: string
}

export function LoginForm() {
  const [formData, setFormData] = useState<LoginFormData>({
    email: "",
    password: ""
  })

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    // Handle form submission
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  return (
    <form onSubmit={handleSubmit}>
      <Input
        name="email"
        type="email"
        value={formData.email}
        onChange={handleInputChange}
      />
      <Button type="submit">Login</Button>
    </form>
  )
}
```

## Supabase Type Integration

### Database Types
```tsx
// Generate types from Supabase
export type Database = {
  public: {
    Tables: {
      users: {
        Row: {
          id: string
          email: string
          created_at: string
          profile_id: string | null
        }
        Insert: {
          id?: string
          email: string
          created_at?: string
          profile_id?: string | null
        }
        Update: {
          id?: string
          email?: string
          created_at?: string
          profile_id?: string | null
        }
      }
      profiles: {
        Row: {
          id: string
          user_id: string
          display_name: string | null
          avatar_url: string | null
        }
        Insert: {
          id?: string
          user_id: string
          display_name?: string | null
          avatar_url?: string | null
        }
        Update: {
          id?: string
          user_id?: string
          display_name?: string | null
          avatar_url?: string | null
        }
      }
    }
  }
}

// Type helpers
type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row']
type InsertTables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert']
type UpdateTables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update']

// Usage
type User = Tables<'users'>
type Profile = Tables<'profiles'>
type NewUser = InsertTables<'users'>
```

### API Response Types
```tsx
// Supabase response wrapper
type SupabaseResponse<T> = {
  data: T | null
  error: Error | null
  loading: boolean
}

// Custom hook with proper typing
export function useUser(): SupabaseResponse<User> {
  const [data, setData] = useState<User | null>(null)
  const [error, setError] = useState<Error | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const { data: user, error } = await supabase
          .from('users')
          .select('*')
          .single()

        if (error) throw error
        setData(user)
      } catch (err) {
        setError(err as Error)
      } finally {
        setLoading(false)
      }
    }

    fetchUser()
  }, [])

  return { data, error, loading }
}
```

## Hook Patterns

### Custom Hook Types
```tsx
// State management hook
interface UseToggleReturn {
  isToggled: boolean
  toggle: () => void
  setToggled: (value: boolean) => void
}

export function useToggle(initialValue = false): UseToggleReturn {
  const [isToggled, setIsToggled] = useState(initialValue)

  const toggle = useCallback(() => {
    setIsToggled(prev => !prev)
  }, [])

  const setToggled = useCallback((value: boolean) => {
    setIsToggled(value)
  }, [])

  return { isToggled, toggle, setToggled }
}

// API hook with error handling
interface UseApiReturn<T> {
  data: T | null
  error: string | null
  loading: boolean
  refetch: () => Promise<void>
}

export function useApi<T>(url: string): UseApiReturn<T> {
  const [data, setData] = useState<T | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [loading, setLoading] = useState(true)

  const fetchData = useCallback(async () => {
    try {
      setLoading(true)
      setError(null)
      const response = await fetch(url)
      if (!response.ok) throw new Error('Failed to fetch')
      const result = await response.json() as T
      setData(result)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error')
    } finally {
      setLoading(false)
    }
  }, [url])

  useEffect(() => {
    fetchData()
  }, [fetchData])

  return { data, error, loading, refetch: fetchData }
}
```

## Utility Type Patterns

### Common Utility Types
```tsx
// Make certain properties optional
type PartialUser = Partial<Pick<User, 'display_name' | 'avatar_url'>> & 
  Required<Pick<User, 'id' | 'email'>>

// Extract specific properties
type UserSummary = Pick<User, 'id' | 'email' | 'display_name'>

// Exclude properties
type PublicUser = Omit<User, 'email' | 'created_at'>

// Create union types for status
type UserStatus = 'active' | 'inactive' | 'pending' | 'suspended'

// Conditional types
type ApiResponse<T> = T extends string
  ? { message: T }
  : { data: T; status: 'success' | 'error' }

// Mapped types for form state
type FormState<T> = {
  [K in keyof T]: {
    value: T[K]
    error: string | null
    touched: boolean
  }
}
```

### Context and Provider Types
```tsx
// Theme context
interface ThemeContextType {
  theme: 'light' | 'dark' | 'system'
  setTheme: (theme: 'light' | 'dark' | 'system') => void
  resolvedTheme: 'light' | 'dark'
}

const ThemeContext = createContext<ThemeContextType | null>(null)

export function useTheme(): ThemeContextType {
  const context = useContext(ThemeContext)
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider')
  }
  return context
}

// Auth context with user state
interface AuthContextType {
  user: User | null
  loading: boolean
  signIn: (email: string, password: string) => Promise<void>
  signOut: () => Promise<void>
  signUp: (email: string, password: string) => Promise<void>
}

const AuthContext = createContext<AuthContextType | null>(null)
```

## Error Handling Types

### Error Boundaries
```tsx
interface ErrorInfo {
  componentStack: string
  errorBoundary?: string
  errorInfo?: string
}

interface ErrorBoundaryState {
  hasError: boolean
  error: Error | null
  errorInfo: ErrorInfo | null
}

class ErrorBoundary extends Component<
  React.PropsWithChildren<{}>,
  ErrorBoundaryState
> {
  constructor(props: React.PropsWithChildren<{}>) {
    super(props)
    this.state = { hasError: false, error: null, errorInfo: null }
  }

  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {
    return { hasError: true, error }
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    this.setState({ errorInfo })
  }

  render() {
    if (this.state.hasError) {
      return (
        <Alert variant="destructive">
          <AlertDescription>
            Something went wrong. Please try again.
          </AlertDescription>
        </Alert>
      )
    }

    return this.props.children
  }
}
```

## Best Practices

### Type Safety Guidelines
- Use strict TypeScript configuration
- Prefer interfaces over types for object shapes
- Use union types for controlled values
- Always type function parameters and return values
- Use generic types for reusable components
- Leverage utility types for transformations
- Use type guards for runtime type checking

### Performance Considerations
- Use `React.memo` with proper prop types
- Type `useCallback` and `useMemo` dependencies
- Use `as const` for readonly arrays and objects
- Prefer branded types for IDs and sensitive data

### Code Organization
- Export types alongside components
- Create shared type definitions in dedicated files
- Use barrel exports for clean imports
- Group related types together
- Document complex types with JSDoc comments
